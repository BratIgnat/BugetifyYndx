# bot.py
import logging
import os
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
from speechkit import speech_to_text
from yandex_disk import save_to_yadisk, is_user_authenticated, get_auth_link, set_auth_code

load_dotenv()
logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a", format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply("\U0001F44B –ü—Ä–∏–≤–µ—Ç! –Ø Budgetify ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É—á—ë—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "250 –º–µ—Ç—Ä–æ\n–∏–ª–∏\n127 —Ä—É–±–ª–µ–π 25 –∫–æ–ø–µ–µ–∫ —à–æ–∫–æ–ª–∞–¥–∫–∞.\n\n"
                        "‚ùó –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login")

@dp.message_handler(commands=['login'])
async def cmd_login(message: types.Message):
    auth_link = get_auth_link()
    await message.reply(f"üîë *–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:*\n[–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å]({auth_link})",
                          parse_mode="Markdown")

@dp.message_handler(commands=['code'])
async def cmd_code(message: types.Message):
    code = message.get_args()
    user_id = message.from_user.id
    if set_auth_code(user_id, code):
        await message.reply("\u2705 –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞—Ç–∞–º–∏.")
    else:
        await message.reply("\u274c –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥.")

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id

    if not is_user_authenticated(user_id):
        await message.reply("\u2757 –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        return

    await message.reply("\ud83d\udcc5 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    try:
        voice = await message.voice.get_file()
        ogg_data = await bot.download_file(voice.file_path)
        ogg_bytes = ogg_data.read()
        text = speech_to_text(ogg_bytes)

        if not text:
            raise ValueError("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")

        await save_to_yadisk(user_id, text)
        await message.reply(f"\ud83d\udcc4 –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}\n\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞")
        await message.reply("\u274c –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
