import logging
import os
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
from speechkit import speech_to_text

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø Budgetify ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É—á—ë—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
                         "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                         "250 –º–µ—Ç—Ä–æ\n–∏–ª–∏\n127 —Ä—É–±–ª–µ–π 25 –∫–æ–ø–µ–µ–∫ —à–æ–∫–æ–ª–∞–¥–∫–∞.")


@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    await message.reply("üéô –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    voice = await message.voice.get_file()
    ogg_file = await bot.download_file(voice.file_path)
    ogg_data = ogg_file.read()

    try:
        text = speech_to_text(ogg_data)
        if text:
            await message.reply(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:
{text}")
        else:
            await message.reply("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
