import logging
import os
import io
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputFile
from dotenv import load_dotenv
from pathlib import Path
from speechkit import speech_to_text
from yandex_disk import save_to_yandex_disk

env_path = Path(__file__).resolve().parent / '.env'
load_dotenv(dotenv_path=env_path)
print("DEBUG BOT_TOKEN:", os.getenv("BOT_TOKEN"))


# --- –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (systemd —á–µ—Ä–µ–∑ EnvironmentFile)
BOT_TOKEN = os.environ['BOT_TOKEN']
YANDEX_API_KEY = os.environ['YANDEX_API_KEY']
YANDEX_CLIENT_ID = os.environ['YANDEX_CLIENT_ID']
YANDEX_CLIENT_SECRET = os.environ['YANDEX_CLIENT_SECRET']

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_tokens = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø Budgetify ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É—á—ë—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
                         "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                         "250 –º–µ—Ç—Ä–æ\n–∏–ª–∏\n127 —Ä—É–±–ª–µ–π 25 –∫–æ–ø–µ–µ–∫ —à–æ–∫–æ–ª–∞–¥–∫–∞.\n\n"
                         "‚ùóÔ∏è –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login")

@dp.message_handler(commands=['login'])
async def login_command(message: types.Message):
    oauth_url = generate_oauth_url()
    # –û—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —è–≤–Ω—É—é —Å—Å—ã–ª–∫—É –≤ HTML-—Ä–µ–∂–∏–º–µ, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ—Ä—Ç–∏–ª URL
    await message.answer(f"üîë <b>–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b>\n<a href=\"{oauth_url}\">–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å</a>", parse_mode="HTML")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OAuth URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def generate_oauth_url():
    redirect_uri = 'https://oauth.yandex.ru/verification_code'
    scope = 'cloud_api:disk.app_folder'
    return (f"https://oauth.yandex.ru/authorize?response_type=code"
            f"&client_id={YANDEX_CLIENT_ID}"
            f"&redirect_uri={redirect_uri}"
            f"&scope={scope}")

@dp.message_handler(commands=['code'])
async def code_command(message: types.Message):
    code = message.get_args()
    if not code:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /code 1234567")
        return

    token_data = exchange_code_for_token(code)
    if 'access_token' in token_data:
        user_tokens[message.from_user.id] = token_data['access_token']
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞—Ç–∞–º–∏.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω

def exchange_code_for_token(code):
    url = "https://oauth.yandex.ru/token"
    data = {
        'grant_type': 'authorization_code',
        'code': code,
        'client_id': YANDEX_CLIENT_ID,
        'client_secret': YANDEX_CLIENT_SECRET
    }
    response = requests.post(url, data=data)
    return response.json()

@dp.message_handler(content_types=['voice'])
async def handle_voice(message: types.Message):
    await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    file_info = await bot.get_file(message.voice.file_id)
    file = await bot.download_file(file_info.file_path)
    ogg_data = file.read()

    text = speech_to_text(ogg_data)

    if text:
        await message.answer(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        token = user_tokens.get(message.from_user.id)
        if token:
            filename = f"expense_{message.message_id}.txt"
            yandex_response = save_to_yandex_disk(filename, text, token)
            if yandex_response:
                await message.answer("‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        else:
            await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
