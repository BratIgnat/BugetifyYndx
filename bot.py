# ‚úÖ bot.py ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
import logging
import os
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
from speechkit import speech_to_text
from excel_writer import save_expense_to_excel
from yandex_disk import save_to_yandex_disk

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, filename='bot.log', filemode='a', 
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø Budgetify ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É—á—ë—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n250 –º–µ—Ç—Ä–æ\n–∏–ª–∏\n127 —Ä—É–±–ª–µ–π 25 –∫–æ–ø–µ–µ–∫ —à–æ–∫–æ–ª–∞–¥–∫–∞.")


@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    try:
        await message.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        file_info = await bot.get_file(message.voice.file_id)
        file = await bot.download_file(file_info.file_path)
        ogg_data = file.read()

        text = speech_to_text(ogg_data)
        if not text:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        await message.reply(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")

        save_expense_to_excel(user_id=message.from_user.id, text=text)
        save_to_yandex_disk(user_id=message.from_user.id)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
