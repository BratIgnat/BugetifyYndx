import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv

from speechkit import speech_to_text
from yandex_disk import get_user_token, save_expense_to_excel

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a", 
                    format="%(asctime)s [%(levelname)s]: %(message)s")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–æ, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–ø—É—â–µ–Ω—ã –¥–ª—è MVP)
@dp.message_handler(commands=['login'])
async def login(message: types.Message):
    await message.reply("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id
    user_token = get_user_token(user_id)
    if not user_token:
        await message.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login")
        return

    voice = await message.voice.get_file()
    ogg_data = await bot.download_file(voice.file_path)
    ogg_bytes = ogg_data.read()

    try:
        text = speech_to_text(ogg_bytes)
        await message.reply(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")

        # –°—É–ø–µ—Ä–ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        # –ü—Ä–∏–º–µ—Ä: "200 –º–µ—Ç—Ä–æ" -> —Å—É–º–º–∞=200, –∫–∞—Ç–µ–≥–æ—Ä–∏—è=–º–µ—Ç—Ä–æ
        parts = text.split()
        if len(parts) >= 2 and parts[0].replace(",", "").replace(".", "").isdigit():
            amount = parts[0]
            category = " ".join(parts[1:])
        else:
            amount = text
            category = ""

        save_expense_to_excel(user_token, user_id, amount, category)
        await message.reply("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Excel –Ω–∞ –≤–∞—à–µ–º –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –°—Ç–∞—Ä—Ç
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
