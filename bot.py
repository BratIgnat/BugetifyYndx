import logging
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputFile
from dotenv import load_dotenv
from speechkit import speech_to_text
from yandex_disk import save_to_yadisk, is_user_authenticated, get_auth_link, set_auth_code

load_dotenv()
BOT_TOKEN = os.environ["BOT_TOKEN"]

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s]: %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å!

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø Budgetify ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É—á—ë—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "250 –º–µ—Ç—Ä–æ\n"
                        "–∏–ª–∏\n"
                        "127 —Ä—É–±–ª–µ–π 25 –∫–æ–ø–µ–µ–∫ —à–æ–∫–æ–ª–∞–¥–∫–∞.\n\n"
                        "‚ùó –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login")

@dp.message_handler(commands=["login"])
async def login(message: types.Message):
    link = get_auth_link(message.from_user.id)
    await message.reply(f"üîë –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n[–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å]({link})", parse_mode="Markdown")

@dp.message_handler(commands=["code"])
async def code(message: types.Message):
    try:
        code = message.text.split()[1]
        set_auth_code(message.from_user.id, code)
        await message.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞—Ç–∞–º–∏.")
    except Exception:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /code <–ø–æ–ª—É—á–µ–Ω–Ω—ã–π_–∫–æ–¥>")

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    try:
        await message.reply("üéô –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        file_info = await bot.get_file(message.voice.file_id)
        ogg_file = await bot.download_file(file_info.file_path)
        ogg_data = ogg_file.read()

        text = speech_to_text(ogg_data)
        if not text:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return

        await message.reply(f"üßæ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")

        if is_user_authenticated(message.from_user.id):
            save_to_yadisk(message.from_user.id, text)
            await message.reply("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        else:
            await message.reply("‚ö†Ô∏è –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
