import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
from speechkit import speech_to_text
from yandex_disk import save_to_yadisk, is_user_authenticated, get_auth_link, set_auth_code

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO, filename="bot.log",
                    format="%(asctime)s [%(levelname)s]: %(message)s")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –§–£–ù–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê ---
import re
def parse_expense(text):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ '301 —Ä—É–±–ª—å 50 –∫–æ–ø–µ–µ–∫ –º–æ—Ä–æ–∂–µ–Ω–æ–µ' -> (301.50, '–º–æ—Ä–æ–∂–µ–Ω–æ–µ')
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (float, str) –ª–∏–±–æ (None, None) –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å.
    """
    pattern = r"(\d+)\s*(?:—Ä—É–±(?:–ª–µ–π|–ª—å|–ª—è|\.|)?|—Ä|—Ä—É–±\.)?(?:\s*(\d+)\s*(?:–∫–æ–ø(?:–µ–µ–∫|–µ–π|\.|)?))?\s*(.*)"
    match = re.match(pattern, text.strip().lower())
    if not match:
        return None, None

    rub = match.group(1)
    kop = match.group(2)
    category = match.group(3).strip()

    amount = float(rub)
    if kop:
        amount += float(kop) / 100

    return amount, category or ""

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.")

@dp.message_handler(commands=["login"])
async def login(message: types.Message):
    user_id = message.from_user.id
    link = get_auth_link(user_id)
    await message.reply(f"üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {link}\n2. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /code <–∫–æ–¥>")

@dp.message_handler(commands=["code"])
async def code(message: types.Message):
    user_id = message.from_user.id
    try:
        auth_code = message.text.split(maxsplit=1)[1].strip()
        if set_auth_code(user_id, auth_code):
            await message.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞—Ç–∞–º–∏.")
        else:
            await message.reply("‚ùóÔ∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception:
        await message.reply("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /code <–∫–æ–¥>")

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id

    if not is_user_authenticated(user_id):
        await message.reply("‚ùóÔ∏è –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file_info = await bot.get_file(message.voice.file_id)
    ogg_path = f"{user_id}.ogg"
    await bot.download_file(file_info.file_path, ogg_path)

    try:
        text = speech_to_text(ogg_path)
        amount, category = parse_expense(text)
        if amount is None:
            await message.reply("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        await message.reply(f"‚úÖ –†–∞—Å—Ö–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:\n–°—É–º–º–∞: {amount}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        save_to_yadisk(user_id, amount, category)
        await message.reply("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    finally:
        if os.path.exists(ogg_path):
            os.remove(ogg_path)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
