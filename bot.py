import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
from speechkit import speech_to_text
from yandex_disk import save_to_yadisk, is_user_authenticated, get_auth_link, set_auth_code, ExpenseParseError, save_timezone
import pytz

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
    format="%(asctime)s [%(levelname)s]: %(message)s",
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ======== –¢–∞–π–º–∑–æ–Ω—ã: —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö =======
POPULAR_TIMEZONES = [
    "Europe/Moscow", "Europe/Kaliningrad", "Asia/Yekaterinburg", "Asia/Novosibirsk",
    "Asia/Krasnoyarsk", "Asia/Irkutsk", "Asia/Yakutsk", "Asia/Vladivostok",
    "Asia/Almaty", "Asia/Aqtobe", "Asia/Bishkek", "Asia/Tbilisi",
    "Asia/Baku", "Europe/Minsk", "Asia/Sakhalin", "Europe/Kiev"
]
# –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# ========== –ö–æ–º–∞–Ω–¥—ã ===================

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Ö–æ–¥–æ–º.\n"
        "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: /set_timezone"
    )

@dp.message_handler(commands=['login'])
async def handle_login(message: types.Message):
    auth_link = get_auth_link(message.from_user.id)
    await message.reply(
        f"üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {auth_link}\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /code <–∫–æ–¥>"
    )

@dp.message_handler(commands=['code'])
async def handle_code(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /code.")
        return
    code = parts[1]
    if set_auth_code(message.from_user.id, code):
        await message.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞—Ç–∞–º–∏.")
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message_handler(commands=['set_timezone'])
async def set_timezone_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ (–¥–æ 10 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥, –∏–Ω–∞—á–µ Telegram –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç)
    for i in range(0, len(POPULAR_TIMEZONES), 2):
        row = POPULAR_TIMEZONES[i:i+2]
        keyboard.row(*row)
    keyboard.row("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–π–º–∑–æ–Ω—ã")
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–π–º–∑–æ–Ω—ã' –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞):",
        reply_markup=keyboard
    )

@dp.message_handler(lambda msg: msg.text in POPULAR_TIMEZONES)
async def handle_timezone_popular(message: types.Message):
    save_timezone(message.from_user.id, message.text)
    await message.reply(f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–π–º–∑–æ–Ω—ã")
async def handle_show_all_timezones(message: types.Message):
    await message.reply(
        "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–∑–æ–Ω –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å:\n"
        "https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\n"
        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(lambda msg: msg.text in pytz.all_timezones)
async def handle_timezone_text(message: types.Message):
    save_timezone(message.from_user.id, message.text)
    await message.reply(f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id
    if not is_user_authenticated(user_id):
        await message.reply("‚ùó –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login")
        return

    await message.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    voice = await message.voice.get_file()
    file_path = voice.file_path
    ogg_data = await bot.download_file(file_path)
    ogg_bytes = ogg_data.read()
    try:
        text = speech_to_text(ogg_bytes)
        amount, category = parse_expense(text)
        if amount is None or category is None:
            raise ExpenseParseError("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: '100 —Ä—É–±–ª–µ–π —Ç–∞–∫—Å–∏', '150 –∫–µ—Ñ–∏—Ä'.")
        await message.reply(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")
        save_to_yadisk(user_id, text, message_date=int(message.date.timestamp()))
        await message.reply("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!")
    except ExpenseParseError as e:
        logging.warning(f"ExpenseParseError: {e}")
        await message.reply(f"‚ö†Ô∏è {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
