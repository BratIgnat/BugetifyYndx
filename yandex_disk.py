import os
import requests
import io
import openpyxl
import re

TOKENS_DIR = "tokens"
if not os.path.exists(TOKENS_DIR):
    os.makedirs(TOKENS_DIR)

class ExpenseParseError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    pass

def get_auth_link(user_id):
    client_id = os.getenv("YANDEX_CLIENT_ID")
    return (
        f"https://oauth.yandex.ru/authorize?response_type=code&client_id={client_id}&scope=cloud_api:disk.app_folder"
    )

def set_auth_code(user_id, code):
    client_id = os.getenv("YANDEX_CLIENT_ID")
    client_secret = os.getenv("YANDEX_CLIENT_SECRET")
    url = "https://oauth.yandex.ru/token"
    data = {
        "grant_type": "authorization_code",
        "code": code,
        "client_id": client_id,
        "client_secret": client_secret,
    }
    r = requests.post(url, data=data)
    if r.status_code == 200:
        token = r.json().get("access_token")
        with open(f"{TOKENS_DIR}/{user_id}.token", "w") as f:
            f.write(token)
        return True
    return False

def is_user_authenticated(user_id):
    return os.path.exists(f"{TOKENS_DIR}/{user_id}.token")

def get_user_token(user_id):
    try:
        with open(f"{TOKENS_DIR}/{user_id}.token", "r") as f:
            return f.read().strip()
    except Exception:
        return None

def parse_expense(text):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ '–ø–æ–¥—É—à–∫–∞ 750 —Ä—É–±–ª–µ–π 42 –∫–æ–ø–µ–π–∫–∏' ‚Üí (750.42, '–ø–æ–¥—É—à–∫–∞')
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å '1000 —Ä –µ–¥–∞' ‚Üí (1000.0, '–µ–¥–∞'), –∏ —Å '–µ–¥–∞ 1000 —Ä' ‚Üí (1000.0, '–µ–¥–∞')
    """
    original_text = text.lower()

    # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–µ–ª (—Å –∫–æ–ø–µ–π–∫–∞–º–∏) –∏—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –∏ –≤–∞–ª—é—Ç—ã
    pattern = r"(\d+[.,]?\d*)\s*(—Ä—É–±(–ª—å|–ª–µ–π|–ª—è|–ª–∏|–ª–µ–º|–ª—è–º|–ª—è–º–∏)?|—Ä)?(\s*\d{1,2}\s*(–∫–æ–ø(–µ–π–∫–∞|–µ–π–∫–∏|–µ–µ–∫|–µ–π–∫—É|–µ–π–∫–æ–π|–µ–π–∫–∞–º–∏)?|–∫)?)?"
    matches = list(re.finditer(pattern, original_text, flags=re.IGNORECASE))
    
    amount = 0.0
    if matches:
        for match in matches:
            if match:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—É–±–ª–∏ –∏ –∫–æ–ø–µ–π–∫–∏
                rub = match.group(1)
                kop = None
                if match.group(4):
                    # –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ (–∫–æ–ø–µ–π–∫–∏)
                    kop_match = re.search(r"\d{1,2}", match.group(4))
                    if kop_match:
                        kop = kop_match.group(0)
                if kop:
                    amount = float(rub) + float(kop)/100
                else:
                    amount = float(rub)
                # –í—ã—Ä–µ–∑–∞–µ–º —ç—Ç—É —Å—É–º–º—É —Å –≤–∞–ª—é—Ç–æ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
                text_wo_amount = original_text.replace(match.group(0), "")
                category = re.sub(r"\s+", " ", text_wo_amount).strip()
                return amount, category
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É–º–º—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    return 0.0, original_text.strip()

def save_to_yadisk(user_id, text):
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not text or not text.strip():
        raise ExpenseParseError("üîá–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å.")
    amount, category = parse_expense(text)
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∫—Ä–æ–º–µ —Å—É–º–º—ã!
    # –û–±—ã—á–Ω–æ –Ω–∞–¥–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ –ø–æ–ª—è (–∏ —Å—É–º–º–∞, –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    if amount == 0.0 and not category:
        raise ExpenseParseError("‚ùî–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å.")
    if amount == 0.0:
        raise ExpenseParseError("üí∏–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å.")
    if not category:
        raise ExpenseParseError("üè∑Ô∏è–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å.")

    token = get_user_token(user_id)
    if not token:
        raise Exception("User not authenticated")
    file_name = f"{user_id}.xlsx"
    remote_path = f"app:/{file_name}"

    # 2. –°–∫–∞—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π excel (–µ—Å–ª–∏ –µ—Å—Ç—å)
    headers = {"Authorization": f"OAuth {token}"}
    download_url = "https://cloud-api.yandex.net/v1/disk/resources/download"
    params_download = {"path": remote_path}
    r2 = requests.get(download_url, params=params_download, headers=headers)

    if r2.status_code == 200 and "href" in r2.json():
        download_href = r2.json()["href"]
        file_content = requests.get(download_href).content
        workbook = openpyxl.load_workbook(io.BytesIO(file_content))
        sheet = workbook.active
    else:
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["#", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"])

    idx = sheet.max_row
    sheet.append([idx, amount, category])

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º excel-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
    output = io.BytesIO()
    workbook.save(output)
    output.seek(0)

    # 4. –ü–æ–ª—É—á–∞–µ–º upload —Å—Å—ã–ª–∫—É
    upload_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {"path": remote_path, "overwrite": "true"}
    r = requests.get(upload_url, params=params, headers=headers)
    href = r.json().get("href")
    if not href:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")

    # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
    requests.put(href, data=output.getvalue())
